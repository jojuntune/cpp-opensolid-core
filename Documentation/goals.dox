/**

\page goals Goals

\section goals-xml XML file format

- allow other programs to read/modify/create CAD files
- embed Python or Ruby
    - embedding is simple using <a href="http://www.alcyone.com/pyos/empy/">EmPy</a> for python, or an eRuby implementation such as <a href="http://www.kuwata-lab.com/erubis/">Erubis</a> for Ruby
    - allow users to gradually go from a traditional CAD interface (directly generate XML elements and attributes representing objects, dimensions etc.), to entering small snippets of code to calculate a particular dimension or generate a single reference point, to entering larger chunks of code that would generate entire features or objects; these chunks of code would be embedded in the XML file which would then be processed to create the final (static) output
- maps well to CAD concepts: named references between objects, hierarchical structure

\section goals-interfaces Component interfaces

- instead of basing the design of one component off another (tight coupling), base both of them off of a common, simple interface (loose coupling)
    - separate parts/assemblies can be designed separately
- leads directly to physical checking fixtures
- allows different components conforming to the same interface to be interchanged

\section goals-modularity External modularity

While modularity is important within a body of code (to simplify the relationships between different parts of the code), it is also important that the entire body of code 'plays well with others'.  This means designing OpenSolid in such a way that it can interact easily with other pieces of software, such as:
- Version control systems: store CAD data in a way that facilitates tracking and merging changes
    - Try to have changes made to a file affect only a small part of that file
    - Don't change files unless actually necessary
        - Avoid spurious timestamps that change every time a file is opened and saved
        - Avoid storing 'convenience' information in a CAD file such as viewing orientation
- XML manipulation: allow external XML tools to work with OpenSolid XML files
    - Publish OpenSolid DTD to facilitate tools that modify or transform OpenSolid XML files
    - Try to keep XML in the same style, e.g. make in-place modifications to an externally-generated XML file instead of simply reading it in and then writing it out in a standard (possibly very different) format
- Renderers: Allow OpenSolid models to be exported to mesh formats used by <a href="http://www.yafray.org">YafRay</a>, <a href="http://www.povray.org">POV-Ray</a> etc.
- Finite element analysis: Export to a format usable by <a href="http://www.fenics.org">FEniCS</a> or similar programs

*/
 